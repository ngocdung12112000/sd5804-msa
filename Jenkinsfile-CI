// Jenkinsfile
pipeline {
    agent any // Runs on the Jenkins master or any available agent. For Docker builds, master needs Docker.

    environment {
        AWS_REGION                  = 'ap-southeast-1' // Set your AWS region
        AWS_ACCOUNT_ID              = '811492260998' // Assuming AWS Steps plugin for dynamic account ID
        FRONTEND_ECR_REPOSITORY_NAME= 'bndz/frontend' // From ecr.tf (name, not full URL initially)
        BACKEND_ECR_REPOSITORY_NAME = 'bndz/backend'  // From ecr.tf
        EKS_CLUSTER_NAME            = 'my-eks-cluster'  // From eks.tf
        K8S_NAMESPACE               = 'default' // Or your target Kubernetes namespace
        // Derived ECR URLs
        FRONTEND_ECR_URL            = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${FRONTEND_ECR_REPOSITORY_NAME}"
        BACKEND_ECR_URL             = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${BACKEND_ECR_REPOSITORY_NAME}"
        // Kubeconfig for Jenkins user (ensure it's configured in Phase 9, Step 6)
        KUBECONFIG_PATH             = '/var/lib/jenkins/.kube/config'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    // Create a unique build tag
                    env.BUILD_TAG = "build-${BUILD_NUMBER}-${new Date().format('yyyyMMddHHmmss')}"
                    echo "Build Tag: ${env.BUILD_TAG}"
                }
            }
        }

        stage('Setup AWS CLI and Kubectl Context') {
            steps {
                sh "aws --version"
                sh "kubectl version --client"
                // The Jenkins EC2 instance's IAM role should provide credentials automatically
                // Ensure kubectl context is set (was done for jenkins user in Phase 9, Step 6)
                // Can re-affirm or update kubeconfig if needed:
                // sh "aws eks update-kubeconfig --region ${env.AWS_REGION} --name ${env.EKS_CLUSTER_NAME} --kubeconfig ${env.KUBECONFIG_PATH}"
                sh "kubectl --kubeconfig ${env.KUBECONFIG_PATH} config current-context"
                sh "kubectl --kubeconfig ${env.KUBECONFIG_PATH} get nodes -o wide"
            }
        }

        stage('Build and Push Docker Images') {
            parallel {
                stage('Build & Push Backend Image') {
                    when { expression { fileExists 'backend/Dockerfile' } }
                    steps {
                        dir('backend') {
                            script {
                                def fullImageName = "${env.BACKEND_ECR_URL}:${env.BUILD_TAG}"
                                echo "Building Backend Image: ${fullImageName}"
                                // Login to ECR using IAM role (AWS CLI v2 method)
                                sh "aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com"
                                docker.build(fullImageName, ".")
                                echo "Pushing Backend Image: ${fullImageName}"
                                docker.image(fullImageName).push()
                                env.BACKEND_IMAGE_URI = fullImageName // Save for deployment stage
                            }
                        }
                    }
                }
                stage('Build & Push Frontend Image') {
                    when { expression { fileExists 'frontend/Dockerfile' } }
                    steps {
                        dir('frontend') {
                            script {
                                def fullImageName = "${env.FRONTEND_ECR_URL}:${env.BUILD_TAG}"
                                echo "Building Frontend Image: ${fullImageName}"
                                sh "aws ecr get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.AWS_ACCOUNT_ID}.dkr.ecr.${env.AWS_REGION}.amazonaws.com"
                                docker.build(fullImageName, ".")
                                echo "Pushing Frontend Image: ${fullImageName}"
                                docker.image(fullImageName).push()
                                env.FRONTEND_IMAGE_URI = fullImageName // Save for deployment stage
                            }
                        }
                    }
                }
            }
        }

        // stage('Deploy to EKS') {
        //     steps {
        //         script {
        //             // Ensure Kubernetes secrets (like MongoDB URI) are already in the cluster
        //             // For production, manage secrets securely (e.g., HashiCorp Vault, AWS Secrets Manager + CSI Driver)

        //             if (env.BACKEND_IMAGE_URI) {
        //                 echo "Deploying Backend: ${env.BACKEND_IMAGE_URI}"
        //                 // Update the image in the deployment YAML (can also use kustomize or helm)
        //                 // This is a simple sed replacement. More robust methods exist.
        //                 sh """
        //                 sed -i 's|image:.*${env.BACKEND_ECR_REPOSITORY_NAME}:.*|image: ${env.BACKEND_IMAGE_URI}|g' k8s/backend-deployment.yaml
        //                 cat k8s/backend-deployment.yaml
        //                 kubectl --kubeconfig ${env.KUBECONFIG_PATH} apply -f k8s/backend-deployment.yaml --namespace=${env.K8S_NAMESPACE}
        //                 kubectl --kubeconfig ${env.KUBECONFIG_PATH} apply -f k8s/backend-service.yaml --namespace=${env.K8S_NAMESPACE}
        //                 kubectl --kubeconfig ${env.KUBECONFIG_PATH} rollout status deployment/backend-app-deployment --namespace=${env.K8S_NAMESPACE} --timeout=5m
        //                 """
        //             } else {
        //                 echo "Backend image URI not found. Skipping backend deployment."
        //             }

        //             if (env.FRONTEND_IMAGE_URI) {
        //                 echo "Deploying Frontend: ${env.FRONTEND_IMAGE_URI}"
        //                 sh """
        //                 sed -i 's|image:.*${env.FRONTEND_ECR_REPOSITORY_NAME}:.*|image: ${env.FRONTEND_IMAGE_URI}|g' k8s/frontend-deployment.yaml
        //                 cat k8s/frontend-deployment.yaml
        //                 kubectl --kubeconfig ${env.KUBECONFIG_PATH} apply -f k8s/frontend-deployment.yaml --namespace=${env.K8S_NAMESPACE}
        //                 kubectl --kubeconfig ${env.KUBECONFIG_PATH} apply -f k8s/frontend-service.yaml --namespace=${env.K8S_NAMESPACE}
        //                 kubectl --kubeconfig ${env.KUBECONFIG_PATH} rollout status deployment/frontend-app-deployment --namespace=${env.K8S_NAMESPACE} --timeout=5m
        //                 """
        //             } else {
        //                 echo "Frontend image URI not found. Skipping frontend deployment."
        //             }
        //             echo "Deployment to EKS completed for build ${env.BUILD_TAG}."
        //         }
        //     }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
            // cleanWs() // Clean up workspace
        }
        success {
            echo 'Pipeline Succeeded!'
            // Add notifications (Email, Slack, etc.)
        }
        failure {
            echo 'Pipeline Failed!'
            // Add notifications
        }
    }
}